// buildscript can be removed once gradle-release plugin is approved by grdle
buildscript {
    repositories {
        mavenLocal()
        if (project.hasProperty('localNexus')) {
            maven {
                url "${localNexus}"
                allowInsecureProtocol = true
            }
        } else {
            mavenCentral()
        }
    }

    dependencies {
        classpath 'com.fincher:gradle-release:0.0.3'
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
	id "eclipse"
    id "com.diffplug.spotless" version "6.7.2"
    id 'checkstyle'
    id 'com.gradle.plugin-publish' version '1.0.0'
//    id 'com.fincher.release' version '0.0.2'
}

group = 'com.fincher'

pluginBundle {
  website = 'https://github.com/bfincher/gradle-release-plugin'
  vcsUrl = 'https://github.com/bfincher/gradle-release-plugin'
  tags = ['release']
}

gradlePlugin {
	plugins {
		release {
			id = "com.fincher.release"
            displayName = 'Gradle release plugin'
            description = 'A plugin to perform a release in 2 phases.  Allowing for a tag and publish to be performed before the new version is set'
			implementationClass = "com.fincher.gradle.release.ReleasePlugin"
		}
	}
}
java {
	toolchain {
    	languageVersion = JavaLanguageVersion.of(11)
	}
}

sourceSets {
	functionalTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

repositories {
    mavenLocal()
    if (project.hasProperty('localNexus')) {
        maven {
            url "${localNexus}"
        }
    } else {
        mavenCentral()
    }
}

publishing {
    repositories {
        maven {
            if (project.hasProperty("publishUsername") && project.hasProperty("publishPassword")) { 
                credentials {
                    username = "${publishUsername}"
                    password = "${publishPassword}"
                }
		
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "${publishSnapshotUrl}"
                } else {
                    url "${publishReleaseUrl}"
                }

                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}
	
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

dependencies {
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.2.0.202206071550-r'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'com.google.guava:guava:31.1-jre'
    functionalTestImplementation 'com.google.guava:guava:31.1-jre'
}

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
   	testClassesDirs = sourceSets.functionalTest.output.classesDirs
   	classpath = sourceSets.functionalTest.runtimeClasspath
   	useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
   	// Run the functional tests as part of `check`
   	dependsOn(tasks.functionalTest)
}

tasks.named('test') {
   	useJUnitPlatform()
}

spotless {
    java {
        eclipse('4.19.0').configFile('config/eclipse_format.xml')
    }
}
